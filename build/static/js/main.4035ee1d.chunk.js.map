{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","api","useState","query","setQuery","weather","setWeather","className","href","src","alt","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","key","fetch","then","response","json","result","console","log","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yLAwGeA,MAtGf,WACE,IAAMC,EACC,mCADDA,EAEC,2CAHM,EAMaC,mBAAS,IANtB,mBAMNC,EANM,KAMCC,EAND,OAOiBF,mBAAS,IAP1B,mBAONG,EAPM,KAOGC,EAPH,KAsDb,OACE,sBAAKC,UAAU,MAAf,UACE,mBAAGC,KAAO,4CAAV,SACA,qBACEC,IAAI,yHACJC,IAAI,GACJH,UAAU,mBAGZ,sBACEA,UACyB,oBAAhBF,EAAQM,MACXN,EAAQM,KAAKC,KAAO,GAClB,0BAEF,qBANR,UASE,6CACA,qDACA,uBACEC,KAAK,OACLC,YAAY,YACZC,SAAU,SAACC,GAAD,OAAOZ,EAASY,EAAEC,OAAOC,QACnCA,MAAOf,EACPgB,WAtEW,SAACH,GACJ,UAAVA,EAAEI,KACJC,MAAM,GAAD,OAAIpB,EAAJ,qBAAwBE,EAAxB,+BAAoDF,IACtDqB,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLnB,EAAWmB,GACXrB,EAAS,IACTsB,QAAQC,IAAIF,SAiEW,qBAAjBpB,EAAQM,KACd,gCACE,sBAAKJ,UAAU,gBAAf,UACE,sBAAKA,UAAU,WAAf,UACGF,EAAQuB,KADX,KACmBvB,EAAQwB,IAAIC,WAE/B,qBAAKvB,UAAU,OAAf,SAlEQ,SAACwB,GACnB,IAwBIC,EAVO,CACT,SACA,SACA,UACA,YACA,WACA,SACA,YAGaD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EA1BS,CACX,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAciBL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAoCDE,CAAY,IAAIC,WAEzC,sBAAKlC,UAAU,eAAf,UACE,sBAAKA,UAAU,OAAf,UAAuBmC,KAAKC,MAAMtC,EAAQM,KAAKC,MAA/C,WACA,qBAAKL,UAAU,UAAf,SAA0BF,EAAQA,QAAQ,GAAGM,aAIjD,UCrFKiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4035ee1d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nfunction App() {\n  const api = {\n    key: \"7c78c50a08486496c804d6f5f4b7b440\",\n    url: \"https://api.openweathermap.org/data/2.5/\",\n  };\n\n  const [query, setQuery] = useState(\"\");\n  const [weather, setWeather] = useState({});\n\n  const getWeather = (e) => {\n    if (e.key === \"Enter\") {\n      fetch(`${api.url}weather?q=${query}&units=metric&APPID=${api.key}`)\n        .then((response) => response.json())\n        .then((result) => {\n          setWeather(result);\n          setQuery(\"\");\n          console.log(result);\n        });\n    }\n  };\n\n  const dateBuilder = (d) => {\n    let months = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\",\n    ];\n    let days = [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\",\n    ];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`;\n  };\n\n  return (\n    <div className=\"App\">\n      <a href = \"https://github.com/halchester/Weather-App\">\n      <img\n        src=\"https://external-content.duckduckgo.com/iu/?u=http%3A%2F%2Fpngimg.com%2Fuploads%2Fgithub%2Fgithub_PNG40.png&f=1&nofb=1\"\n        alt=\"\"\n        className=\"github__logo\"\n      />\n      </a>\n      <div\n        className={\n          typeof weather.main != \"undefined\"\n            ? weather.main.temp > 15\n              ? \"weather__container warm\"\n              : \"weather__container\"\n            : \"weather__container\"\n        }\n      >\n        <h1>Weather App</h1>\n        <h5>Enter your location</h5>\n        <input\n          type=\"text\"\n          placeholder=\"Search...\"\n          onChange={(e) => setQuery(e.target.value)}\n          value={query}\n          onKeyPress={getWeather}\n        ></input>\n        {typeof weather.main !== \"undefined\" ? (\n          <div>\n            <div className=\"location__box\">\n              <div className=\"location\">\n                {weather.name}, {weather.sys.country}\n              </div>\n              <div className=\"date\">{dateBuilder(new Date())}</div>\n            </div>\n            <div className=\"weather__box\">\n              <div className=\"temp\">{Math.round(weather.main.temp)}Â°c</div>\n              <div className=\"weather\">{weather.weather[0].main}</div>\n            </div>\n          </div>\n        ) : (\n          \"\"\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}